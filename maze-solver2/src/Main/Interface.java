/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import Shared.*;
import java.util.Objects;

/**
 *
 * @author Usuario
 */
public class Interface extends javax.swing.JFrame {

    private String filePath = null;
    private String serverFilePath = null;
    private String clientID = "";
    private fileChooser fileC = null;
    private boolean solved = false;

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
        clientID = GetNetworkAddress.GetAddress("ip");
        System.out.println("IP: "+clientID);
    }
    
    public Interface(String fileName, String file) {
        initComponents();
        clientID = GetNetworkAddress.GetAddress("ip");
        System.out.println("IP: "+clientID);
        file = file.replaceAll("[0-9]+\n", "");
        jTextArea1.setText(file);
        this.serverFilePath = fileName;
        
        jMenu4.setText("Linhas: " + jTextArea1.getText().split("\n").length);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icones/application_form_magnify.png"))); // NOI18N
        jMenu1.setText("File");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("New File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Open File");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("Remote Config");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Save File on Remote");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Open Remote File");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icones/disk.png"))); // NOI18N
        jMenu2.setText("Local Save");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icones/accept.png"))); // NOI18N
        jMenu3.setText("Solve");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu3KeyPressed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icones/control_play.png"))); // NOI18N
        jMenu4.setEnabled(false);
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);
        jMenu4.getAccessibleContext().setAccessibleName("jMenu4");

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked

    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        saveFile();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int answer;
        answer = JOptionPane.showConfirmDialog(this, "O arquivo que você está editando será substituido. Deseja salvar?", "Salvar", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            saveFile();
        }
        jTextArea1.setText("");
        filePath = null;
        this.serverFilePath = null;
        solved = false;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (!jTextArea1.getText().equals("")) {
            int answer;
            answer = JOptionPane.showConfirmDialog(this, "O arquivo que você está editando será substituido. Deseja salvar?", "Salvar", JOptionPane.YES_NO_OPTION);
            if (answer == JOptionPane.YES_OPTION) {
                saveFile();
            }
        }
        jTextArea1.setText("");
        filePath = null;
        this.serverFilePath = null;

        openFile();
        solved = false;
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed

    }//GEN-LAST:event_jTextArea1KeyPressed

    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
        Character typed = evt.getKeyChar();
        if (typed != '#' && typed != ' ' && typed != 'E' && typed != 'S') {
            evt.consume();
        }
        try {
            jMenu4.setText("Linhas: " + jTextArea1.getText().split("\n").length);
        } catch (Exception ex) {
            jMenu4.setText("Linhas: 0");            
        }
    }//GEN-LAST:event_jTextArea1KeyTyped

    private void jMenu3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu3KeyPressed

    }//GEN-LAST:event_jMenu3KeyPressed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        String[] lines = jTextArea1.getText().split("\n");
        stack dataLines = new stack<String>();
        
        try {
            dataLines.push(Integer.toString(lines.length));
        } catch (Exception ex) {
            return;
        }
        for(int ix = 0; ix< lines.length; ix++){
            dataLines.push(lines[ix]);
        }
        Boolean bobThought = null;
        try{
            Maze maze = new Maze(dataLines);
            Person Bob = new Person(maze);

            while (!Bob.isTheWinner()) {
                bobThought = Bob.think();
            }
            jTextArea1.setText(Bob.writeSolution());
            System.out.println("Bingo! Bob is the winner!!!!!!");
            JOptionPane.showMessageDialog(this, "Sucesso, labirinto resolvido!", "Sucesso", JOptionPane.OK_OPTION);
            solved = true;
        }catch(Exception ex){
            System.err.println(ex);
            JOptionPane.showMessageDialog(this, "Labirinto Inválido", "Inválido", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        RemoteOption formOpt = new RemoteOption();
        formOpt.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if(this.serverFilePath == null){
            do{
                this.serverFilePath = JOptionPane.showInputDialog("Digite o nome do Arquivo: ");
                System.out.println("File: "+filePath);
            }while(this.serverFilePath == null);
        }
        saveFileRemote();

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.setVisible(false);
        FilesListInterface listLab = new FilesListInterface();
        listLab.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    private void saveFile() {
        if(solved){
            JOptionPane.showMessageDialog(this, "Não é permitido salvar labirintos resolvidos", "Atenção", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (filePath != null) {
            writeFile(filePath);
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Desktop"));
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String selectedFileName = selectedFile.getAbsolutePath();
            System.out.println("Selected file: " + selectedFileName);
            if (selectedFileName == null || selectedFileName.equals("")) {
                JOptionPane.showMessageDialog(this, "Atenção: Coloque um nome válido", "Valores Inválidos", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!selectedFileName.contains(".txt")) {
                selectedFileName += ".txt";
            }
            filePath = selectedFileName;
            writeFile(selectedFileName);
        }
        if(this.serverFilePath != null){
            int answer;
            answer = JOptionPane.showConfirmDialog(this, "Você deseja também salvar o arquivo remotamente?", "Salvar", JOptionPane.YES_NO_OPTION);
            if (answer == JOptionPane.YES_OPTION) {
                saveFileRemote();
            }
        }
    }

    public void openFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home") + "/Desktop"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            // System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            filePath = selectedFile.getAbsolutePath();
            jTextArea1.setText(selectedFile.getAbsolutePath());
            try {
                fileChooser file = new fileChooser(selectedFile.getAbsolutePath());
                jTextArea1.setText(file.toString());
                jMenu4.setText("Linhas: " + file.getMazeNum());
                fileC = file;
            } catch (Exception ex) {
            }

        }
    }

    public void writeFile(String name) {
        try {
            FileWriter arquivo;
            arquivo = new FileWriter(new File(name));
            arquivo.write(jTextArea1.getText().split("\n").length + "\n" + jTextArea1.getText());
            arquivo.close();

            JOptionPane.showMessageDialog(this, "Salvo", "Arquivo salvo com sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro: " + ex.toString(), "Erro na gravação do arquivo",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void saveFileRemote(){
        // Pegar arquivo
        String textoDoArquivo = jTextArea1.getText().split("\n").length + "\n" + jTextArea1.getText();
        // Nome do arquivo
        String nomeDoArquivo = this.serverFilePath;
        // Ip do usuário
        String IPdoUsuario = clientID;
        // Qual é a operação?
        Integer operacao = 100;
        // Enviar o arquivo para o servidor

        Labirinto lab = new Labirinto(nomeDoArquivo, textoDoArquivo);
        PedidoSalvamento salvar = new PedidoSalvamento(IPdoUsuario, lab);
        try {
            salvar.enviarDado();
        } catch (IOException ex) {
            System.err.println("Not connected");
            System.err.println(ex.getMessage());
        }
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 53 * hash + Objects.hashCode(this.filePath);
        hash = 53 * hash + Objects.hashCode(this.serverFilePath);
        hash = 53 * hash + Objects.hashCode(this.clientID);
        hash = 53 * hash + Objects.hashCode(this.fileC);
        hash = 53 * hash + (this.solved ? 1 : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Interface other = (Interface) obj;
        if (this.solved != other.solved) {
            return false;
        }
        if (!Objects.equals(this.filePath, other.filePath)) {
            return false;
        }
        if (!Objects.equals(this.serverFilePath, other.serverFilePath)) {
            return false;
        }
        if (!Objects.equals(this.clientID, other.clientID)) {
            return false;
        }
        if (!Objects.equals(this.fileC, other.fileC)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Interface{" + "filePath=" + filePath + ", serverFilePath=" + serverFilePath + ", clientID=" + clientID + ", fileC=" + fileC + ", solved=" + solved + ", jMenu1=" + jMenu1 + ", jMenu2=" + jMenu2 + ", jMenu3=" + jMenu3 + ", jMenu4=" + jMenu4 + ", jMenuBar1=" + jMenuBar1 + ", jMenuItem1=" + jMenuItem1 + ", jMenuItem2=" + jMenuItem2 + ", jMenuItem3=" + jMenuItem3 + ", jMenuItem4=" + jMenuItem4 + ", jMenuItem5=" + jMenuItem5 + ", jScrollPane1=" + jScrollPane1 + ", jTextArea1=" + jTextArea1 + '}';
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
