/**
 * Interface que tem como sua função abrir uma nova aba, que irá através de uma
 * requisição ao servidor e o ip do cliente mostrar uma tabela com os labirintos
 * cadastrados no banco de dados,conseguindo abri-los novamente.
 */
package Main;

import Shared.*;
import java.io.IOException;
import java.util.Objects;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RGrupos
 */
public class FilesListInterface extends javax.swing.JFrame {

    /**
     * Método que irá abrir e carregar na interface a tabela.
     */
    public FilesListInterface() {
        initComponents();
        try{
            loadTable();   
        }catch (Exception ex){
            System.err.println(ex.getStackTrace());
        }
    }
    
    /**
     * Método responsável por carregar a tabela, primeiro irá pegar o ip do cliente
     * após isto irá fazer uma solicitação ao servidor pedindo a tabela com as
     * informações do labirinto do cliente.
     * 
     * @throws ClassNotFoundException 
     */
    public void loadTable() throws ClassNotFoundException{
        String clientID = GetNetworkAddress.GetAddress("ip");
        PedidoLabirintos solicitar = new PedidoLabirintos(clientID);
        
        jTable1.getColumnModel().getColumn(1).setMinWidth(0);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        
        try {
            Labirintos resposta = solicitar.enviarDado();
            System.out.println("Labirintos encontrados:"+resposta.getQtd());
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            for(int index = 0; index < resposta.getQtd(); index++){
                
                Labirinto lab = resposta.getLabirinto(index);
                model.addRow(new Object[]{lab.getNome(), lab.getConteudo()});
            }
        } catch (IOException ex) {
            System.err.println("Not connected");
            System.err.println(ex.getMessage());
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Filename", "File"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main/icones/application_edit.png"))); // NOI18N
        jMenu1.setText("Open file");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Este é um botão que irá após o arquivo selecionado abrir o labirinto
     * na interface.
     * 
     * @param evt 
     */
    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        int selected = jTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String fileName = model.getValueAt(selected, 0).toString();
        String file = model.getValueAt(selected, 1).toString();
        System.out.println(fileName);
        System.out.println(file);
        
        this.setVisible(false);
        
        Interface form1 = new Interface(fileName, file);
        form1.setVisible(true);
    }//GEN-LAST:event_jMenu1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilesListInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilesListInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilesListInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilesListInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilesListInterface().setVisible(true);
            }
        });
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 47 * hash + Objects.hashCode(this.jMenu1);
        hash = 47 * hash + Objects.hashCode(this.jMenuBar1);
        hash = 47 * hash + Objects.hashCode(this.jPanel1);
        hash = 47 * hash + Objects.hashCode(this.jScrollPane1);
        hash = 47 * hash + Objects.hashCode(this.jTable1);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FilesListInterface other = (FilesListInterface) obj;
        if (!Objects.equals(this.jMenu1, other.jMenu1)) {
            return false;
        }
        if (!Objects.equals(this.jMenuBar1, other.jMenuBar1)) {
            return false;
        }
        if (!Objects.equals(this.jPanel1, other.jPanel1)) {
            return false;
        }
        if (!Objects.equals(this.jScrollPane1, other.jScrollPane1)) {
            return false;
        }
        if (!Objects.equals(this.jTable1, other.jTable1)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "FilesListInterface{" + "jMenu1=" + jMenu1 + ", jMenuBar1=" + jMenuBar1 + ", jPanel1=" + jPanel1 + ", jScrollPane1=" + jScrollPane1 + ", jTable1=" + jTable1 + '}';
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
